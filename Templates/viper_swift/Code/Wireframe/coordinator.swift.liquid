{% include 'header' %}

import UIKit

class {{ module_info.name }}Coordinator: BaseCoordinator, {{ module_info.name }}WireframeInput {

    // MARK: - Private properties

    private let router: Routable
    private var factory: {{ module_info.name }}FactoryProtocol = {{ module_info.name }}Factory()
    private weak var presentable: {{ module_info.name }}ViewController?
    private var temporaryPresentable: {{ module_info.name }}ViewController?

    // MARK: - Lifecycle

    init(with router: Routable, factory: {{ module_info.name }}FactoryProtocol? = nil) {
        self.router = router
        if let factory = factory {
            self.factory = factory
        }
    }

}

// MARK: - Coordinatable

extension {{ module_info.name }}Coordinator: Coordinatable {
    func start() {
        start{{ module_info.name }}Module()
    }

    private func start{{ module_info.name }}Module() {
        temporaryPresentable = factory.create{{ module_info.name }}View(self)
        presentable = temporaryPresentable
    }

}

// MARK: - Presentable

extension {{ module_info.name }}Coordinator: Presentable {
    var viewController: UIViewController? {
        defer {
            temporaryPresentable = nil
        }
        return presentable
    }
}
